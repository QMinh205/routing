####################################################
# LSrouter.py
# Name:
# HUID:
#####################################################

from router import Router
import networkx
import json
from packet import Packet


class LSrouter(Router):
    """Link state routing protocol implementation.

    Add your own class fields and initialization code (e.g. to create forwarding table
    data structures). See the `Router` base class for docstrings of the methods to
    override.
    """

    def __init__(self, addr, heartbeat_time):
        Router.__init__(self, addr)  # Initialize base class - DO NOT REMOVE
        self.heartbeat_time = heartbeat_time
        self.last_time = 0
        
        #   router_addr: {addr: cost}
        self.link_state_db= {addr: {} }
        
        #   addr: seq_number
        self.seq_numbers = {addr: 0}
        
        # dst: next_hop
        self.forwarding_table = {}
        
        # port: endpoint
        self.neighbors = {}
        
    def handle_packet(self, port, packet):
        """Process incoming packet."""
        if packet.is_traceroute:
            # Hint: this is a normal data packet
            # If the forwarding table contains packet.dst_addr
            #   send packet based on forwarding table, e.g., self.send(port, packet)
            if packet.dst_addr in self.forwarding_table:
                next_hop = self.forwarding_table[packet.dst_addr]
                self.send(next_hop, packet)
        else:
            try:
                # Hint: this is a routing packet generated by your routing protocol
                data = json.loads(packet.content)
                seq_number = data["seq_number"]
                addr = data["addr"]
                link_state = data["link_state"]
                
                is_new = False
                if addr not in self.seq_numbers:
                    is_new = True   
                elif seq_number > self.seq_numbers[addr]:
                    is_new = True
                
                # If the sequence number is higher
                if is_new:
                    self.seq_numbers[addr] = seq_number
                    
                    #update the local copy of the link state
                    self.link_state_db[addr] = link_state
                    
                    self.compute_shortest_paths()
                    
                    #broadcast the packet to other neighbors
                    self.broadcast_link_state_packet(packet.content, port)
            except (json.JSONDecodeError,KeyError):
                print("Error decoding JSON:", KeyError)
                return

    def handle_new_link(self, port, endpoint, cost):
        """Handle new link."""
        self.neighbors[port] = endpoint
        
        self.link_state_db[self.addr][endpoint] = cost
        
        if self.addr not in self.seq_numbers :
            self.seq_numbers[self.addr] = 0
        self.seq_numbers[self.addr] += 1
        
        self.compute_shortest_paths()

        # broadcast the new link state of this router to all neighbors
        self.send_link_state_packet()

    def handle_remove_link(self, port):
        """Handle removed link."""
        if port not in self.neighbors:
            return
        
        endpoint = self.neighbors[port]
        del self.neighbors[port]
        
        if endpoint in self.link_state_db[self.addr]:
            del self.link_state_db[self.addr][endpoint]
        
        self.seq_numbers[self.addr] += 1
        
        self.compute_shortest_paths()

        # broadcast the new link state of this router to all neighbors
        self.send_link_state_packet()

    def handle_time(self, time_ms):
        """Handle current time."""
        if time_ms - self.last_time >= self.heartbeat_time:
            self.last_time = time_ms
            # TODO
            #   broadcast the link state of this router to all neighbors
            pass

    def __repr__(self):
        """Representation for debugging in the network visualizer."""
        # TODO
        #   NOTE This method is for your own convenience and will not be graded
        return f"LSrouter(addr={self.addr})"
